[{"name": "app.py", "content": "from shiny import App, ui, render\nimport pandas as pd\nimport numpy as np\nimport pickle\nimport statsmodels.api as sm\nfrom shinywidgets import output_widget, render_widget\nimport plotly.express as px\nfrom pathlib import Path\n\nmodel_path = Path(__file__).parent / \"heisman_model.pkl\"\nmodel_data_path = Path(__file__).parent / \"Model_Data.csv\"\nweekly_data_path = Path(__file__).parent / \"Weekly_Data.csv\"\n\nmodel = pickle.load(open(model_path, 'rb'))\n################### Historical #########################\nmodel_data = pd.read_csv(model_data_path).reset_index(drop = True)\n\npredict_data =  model_data[['Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']]\npredict_data = sm.tools.add_constant(predict_data)\npredict_data['Prediction'] = model.predict(predict_data)\npredict_data = predict_data['Prediction']\n\nmodel_data = pd.merge(model_data, predict_data, left_index=True, right_index=True)\nmodel_data['CPI'] = model_data['CPI'].round(2)\nmodel_data['Prediction'] = model_data['Prediction'].round(2)\n\n################### Current #########################\ncurrent_df = pd.read_csv(weekly_data_path).reset_index(drop = True)\n\ncurrent_predict_df =  current_df[['Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']]\ncurrent_predict_df = sm.tools.add_constant(current_predict_df)\ncurrent_predict_df['Projected Voting Points'] = model.predict(current_predict_df)\ncurrent_predict_df = current_predict_df['Projected Voting Points']\n\ncurrent_df = pd.merge(current_df, current_predict_df, left_index=True, right_index=True)\ncurrent_df['CPI'] = current_df['CPI'].round(2)\ncurrent_df['Projected Voting Points'] = current_df['Projected Voting Points'].round(2)\n\n\n# Part 1: ui ----\napp_ui = ui.page_fluid(\n    ui.navset_tab(\n        ui.nav(\"Model Details\", \n           \n        ui.markdown(\n            \"\"\"\n            # So how does this model work anyway?\n            This is a project initially created in the loads of free time that existed in the summer of 2020. And now\n            has taken on a collaborative work effort in the creation of the product.\n            <br />\n\n            Simply put, the model aims to predict the final standings for the most prestigous indivdual award in \n            collegiate football, specifically for quarterbacks. For legal purposes, this project does not explicitly call\n            out the name of the award. As a hint, the award is named after the man that coached Georgia Tech to a 222-0 victory\n            against Cumberland in 1916. It is worth note that the model focuses on quarterbacks only,\n            as it is difficult to come up with a sample of metrics that apply to the different positions across college football.\n            <br />\n\n            The model itself is a linear regression with award voting points as a response, and individual and team\n            statitistics as the predictors. The model is built with training data from the 2006 to 2018 seasons.\n            <br />\n\n            The model is made up of the following 5 predictors;\n            <br />\n            \n            **Passer Rating** : Passer efficency rating as according to pro-football-reference.com.\n            <br />\n\n            **Passing TDs** : Number of passing touchdowns thrown by a quarterback.\n            <br />\n\n            **Rushing TDs** : Number of rushing touchdowns ran by a quarterback.\n            <br />\n\n            **Power 5 Indicator** : A binary value of 0 or 1. Set equal to 1, \n            if the quarterback's team plays in a power 5 conference. Otherwise 0. Notre Dame is the only independent team \n            to receive a power 5 label.\n            <br />\n\n            **CPI** : A team strength of record metric involving the winning percentages of opponents. More details \n            of the metric can be found at www.cpiratings.com/about.html.\n            \"\"\"\n        )\n               ),\n        ui.nav(\"Past Model Results\", \n           \n        ui.input_select(\"model_year\", \"Model Year\", model_data['Year'].tolist()),\n        ui.output_table(\"historical_data\")\n               ),\n\n    ui.nav(\"Current Model Results\", \n           \n        ui.output_table(\"current_data\")\n               ),\n    \n    ui.nav(\"What If\", \n           \n        ui.input_numeric(\"what_if_QBR\", \"Passer Rating\", value=0.0),\n        ui.input_numeric(\"what_if_pass_TD\", \"Passing TDs\", value=0),\n        ui.input_numeric(\"what_if_rush_TD\", \"Rushing TDs\", value=0),\n        ui.input_radio_buttons(\"what_if_power_5\", \"Power 5 Conference\",  {1 : \"Yes\", 0: \"No\"}),\n        ui.input_numeric(\"what_if_CPI\", \"CPI\", value=0.0),\n        ui.output_text(\"what_if_analysis\")\n               ),\n    \n    ui.nav(\"Scatter\",\n           ui.div(\n           output_widget(\"my_widget\")\n           )\n           )\n    )\n)\n\n\n\n\n# Part 2: server ----\ndef server(input, output, session):\n\n    @output\n    @render.table\n    def historical_data():\n\n        result_df = model_data[model_data['Year'] == int(input.model_year())]\n\n        result_df['Actual_Rank'] = result_df['points_won'].rank(ascending = False).astype('int')\n        result_df['Predicted_Rank'] = result_df['Prediction'].rank(ascending = False).astype('int')\n\n        result_cols = ['Player', 'School', 'Actual_Rank', 'Predicted_Rank', 'Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']\n        result_df = result_df[result_cols]\n\n        return result_df\n    \n    @output\n    @render.table\n    def current_data():\n\n        result_df = current_df\n\n        result_df = result_df.sort_values(by = 'Projected Voting Points', ascending = False)\n        result_df = result_df.reset_index(drop = True)\n        result_df['Rank'] = result_df.index + 1\n        result_cols = ['Rank', 'Player', 'School', 'Projected Voting Points', 'Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']\n        result_df = result_df[result_cols]\n\n        return result_df\n    \n    @output\n    @render.text\n    def what_if_analysis():\n\n        what_if_df = pd.DataFrame({\n            'Passing_Rate' : [float(input.what_if_QBR())],\n            'Passing_TD' : [int(input.what_if_pass_TD())],\n            'Rushing_TD' : [int(input.what_if_rush_TD())],\n            'Power5' : [int(input.what_if_power_5())],\n            'CPI' : [float(input.what_if_CPI())]\n        })\n\n        what_if_df = sm.tools.add_constant(what_if_df, has_constant='add')\n\n        what_if_df['Prediction'] = model.predict(what_if_df)\n\n        result = what_if_df.iloc[0]['Prediction']\n        result = result.round(2)\n\n        return f\"A player with these statistics would have {result} projected voting points.\"\n    \n    @output\n    @render_widget\n    def my_widget():\n        fig = px.scatter(\n            model_data, x=\"Year\", y=\"Prediction\",\n            hover_data=['Player']\n        )\n        return fig\n\n# Combine into a shiny app.\n# Note that the variable must be \"app\".\napp = App(app_ui, server)", "type": "text"}, {"name": "Model_Data.csv", "content": "Player,School,Year,points_won,Passing_Rate,Passing_TD,Rushing_TD,Power5,CPI\nTroy Smith,Ohio State,2006,2540,161.9,30,1,1,15.013680174870936\nBrady Quinn,Notre Dame,2006,782,146.7,37,2,1,8.231919146738909\nColt Brennan,Hawaii,2006,202,186.0,58,5,0,6.365435540069685\nTim Tebow,Florida,2007,1957,172.5,32,23,1,7.987912822160973\nColt Brennan,Hawaii,2007,632,159.8,38,8,0,7.5994759572849\nChase Daniel,Missouri,2007,425,147.9,33,4,1,11.748104548755686\nDennis Dixon,Oregon,2007,178,161.2,20,9,1,6.540100800550993\nPat White,West Virginia,2007,150,151.4,14,14,0,11.379512110196254\nMatt Ryan,Boston College,2007,63,127.0,31,2,1,8.768469146897912\nSam Bradford,Oklahoma,2008,1726,180.8,50,5,1,15.05704821146074\nColt McCoy,Texas,2008,1604,173.8,34,11,1,18.946208112380297\nTim Tebow,Florida,2008,1575,172.4,30,12,1,19.409963559776127\nGraham Harrell,Texas Tech,2008,213,160.0,45,6,1,13.05053009399466\nPat White,West Virginia,2008,19,142.3,21,8,0,6.385230641176652\nNate Davis,Ball State,2008,10,157.0,26,5,0,6.050702467936028\nColt McCoy,Texas,2009,1145,147.4,27,3,1,16.18331903502398\nTim Tebow,Florida,2009,390,164.2,21,14,1,18.51486090299109\nKellen Moore,Boise State,2009,100,161.7,39,1,0,14.46082921027991\nCase Keenum,Houston,2009,37,154.8,44,4,0,4.218052997436561\nCam Newton,Auburn,2010,2263,182.0,30,20,1,23.86780983482786\nAndrew Luck,Stanford,2010,1079,170.2,32,3,1,13.946308906421848\nKellen Moore,Boise State,2010,635,182.6,35,1,0,12.802241937566109\nDenard Robinson,Michigan,2010,84,149.6,18,14,1,3.2478886059804224\nRyan Mallett,Arkansas,2010,41,163.6,32,4,1,10.82973394387262\nColin Kaepernick,Nevada,2010,31,150.5,21,20,0,11.384387560083765\nAndy Dalton,TCU,2010,30,166.5,27,6,0,14.944350584507326\nRobert Griffin III,Baylor,2011,1687,189.5,37,10,1,10.316157413813375\nAndrew Luck,Stanford,2011,1407,169.7,37,2,1,9.667409405228565\nMatt Barkley,USC,2011,153,161.2,39,2,1,9.562203977574791\nCase Keenum,Houston,2011,123,174.0,48,3,0,11.420863535280626\nKellen Moore,Boise State,2011,90,175.2,43,0,0,12.265954369362133\nRussell Wilson,Wisconsin,2011,52,191.8,33,6,1,8.281890427937858\nJohnny Manziel,Texas A&M,2012,2029,155.3,26,21,1,15.754760156860875\nCollin Klein,Kansas State,2012,894,149.2,16,23,1,11.817693133497077\nBraxton Miller,Ohio State,2012,144,140.5,15,13,1,15.169148199200322\nJordan Lynch,Northern Illinois,2012,52,144.9,25,19,0,6.92703223246081\nJameis Winston,Florida State,2013,2205,184.8,40,4,1,19.32052650022246\nA.J. McCarron,Alabama,2013,704,167.2,28,0,1,11.90196866646686\nJordan Lynch,Northern Illinois,2013,558,138.4,24,23,0,7.111211920283987\nJohnny Manziel,Texas A&M,2013,421,172.9,37,9,1,8.051361094960829\nBryce Petty,Baylor,2013,127,174.3,32,14,1,11.402244928532845\nDerek Carr,Fresno State,2013,107,156.3,50,2,0,7.156147448813237\nBraxton Miller,Ohio State,2013,91,158.1,24,12,1,10.39338163747249\nMarcus Mariota,Oregon,2014,2534,181.7,42,15,1,16.12744333111277\nTrevone Boykin,TCU,2014,218,145.9,33,8,1,13.076626318134918\nJ.T. Barrett,Ohio State,2014,78,169.8,34,11,1,20.0747422358138\nJameis Winston,Florida State,2014,51,145.5,25,3,1,18.46103191334333\nDak Prescott,Mississippi State,2014,21,151.7,27,14,1,9.456126458240307\nDeshaun Watson,Clemson,2015,1165,156.3,35,12,1,19.16167854243615\nBaker Mayfield,Oklahoma,2015,334,173.3,36,7,1,12.740224517380366\nKeenan Reynolds,Navy,2015,180,162.1,8,24,0,10.128862442591032\nConnor Cook,Michigan State,2015,13,136.6,24,0,1,14.713371407886711\nLamar Jackson,Louisville,2016,2144,148.8,30,21,1,5.608782090662399\nDeshaun Watson,Clemson,2016,1524,151.1,41,9,1,23.78005620893973\nBaker Mayfield,Oklahoma,2016,361,196.4,40,6,1,11.25001891558911\nJake Browning,Washington,2016,182,167.5,43,4,1,12.923870541835983\nBaker Mayfield,Oklahoma,2017,2398,198.9,43,5,1,11.183099131224177\nLamar Jackson,Louisville,2017,793,146.6,27,18,1,3.9226957076095994\nMason Rudolph,Oklahoma State,2017,56,170.6,37,10,1,6.425405376500221\nMcKenzie Milton,UCF,2017,54,179.3,37,8,0,19.08379077956817\nKyler Murray,Oklahoma,2018,2167,199.2,42,12,1,12.942861869472573\nTua Tagovailoa,Alabama,2018,1871,199.4,43,5,1,20.688097541235337\nDwayne Haskins,Ohio State,2018,783,174.1,50,4,1,13.097950650643533\nWill Grier,West Virginia,2018,126,175.5,37,3,1,5.5749718367802\nGardner Minshew,Washington State,2018,122,147.6,38,4,1,10.593990104817577\nMcKenzie Milton,UCF,2018,39,161.0,25,9,0,11.842688493982308\nJoe Burrow,LSU,2019,2608,202.0,60,5,1,27.81090580974389\nJalen Hurts,Oklahoma,2019,762,191.2,32,20,1,11.86131918185052\nJustin Fields,Ohio State,2019,747,181.4,41,10,1,19.03510596761913\nTrevor Lawrence,Clemson,2019,88,166.7,36,9,1,17.71916867557893\n", "type": "text"}, {"name": "Weekly_Data.csv", "content": "Player,School,Passing_Rate,Passing_TD,Rushing_TD,Power5,CPI\nJayden Daniels,LSU,204.3,25,5,1,9.617784957389551\nJ.J. McCarthy,Michigan,199.1,18,3,1,18.144552228786253\nJalen Milroe,Alabama,175.0,13,5,1,16.109068203816374\nJaylen Raynor,Arkansas State,167.4,13,3,0,1.4031098505864308\nMichael Penix Jr.,Washington,175.5,24,0,1,15.536105032822759\nKaidon Salter,Liberty,176.2,19,7,0,13.400270457746233\nJaxson Dart,Ole Miss,165.4,14,7,1,16.61514146967003\nMichael Pratt,Tulane,180.7,14,4,0,10.070949250448747\nCaleb Williams,USC,175.4,25,9,1,7.702848629997096\nCarson Beck,Georgia,166.2,14,3,1,14.624546480502158\nKyle McCord,Ohio State,160.1,14,0,1,25.852025682070806\nBrady Cook,Missouri,166.2,15,5,1,14.800093404808315\nSam Hartman,Notre Dame,165.3,18,2,1,12.793621930859944\nDillon Gabriel,Oklahoma,169.9,19,8,1,14.705489167069965\nDiego Pavia,New Mexico State,159.8,17,5,0,1.517924669637716\nDrake Maye,North Carolina,156.1,16,6,1,5.793060859403219\nJordan McCloud,James Madison,162.1,18,4,0,19.096209912536445\nJack Plummer,Louisville,151.5,13,1,1,11.897755810361872\nQuinn Ewers,Texas,163.7,13,5,1,17.914152145385742\nCardell Williams,Tulsa,151.6,10,3,0,0.7973211827407176\nBo Nix,Oregon,178.6,21,3,1,11.85118994430048\nJason Bean,Kansas,152.5,9,1,1,9.178360323110311\nTyler Van Dyke,Miami (FL),161.5,16,1,1,6.019188030706281\nJT Daniels,Rice,155.2,19,1,0,1.2272169446843326\nGunnar Watson,Troy,149.2,14,1,0,9.141609146424056\nD.J. Uiagalelei,Oregon State,155.6,17,5,1,8.215485766678832\nBrett Gabbert,Miami (OH),152.1,14,2,0,5.020270371470941\nCooper Legas,Utah State,159.7,13,0,0,0.9919801398167761\nGrayson McCall,Coastal Carolina,148.7,10,1,0,5.776362250438248\nTJ Finley,Texas State,154.4,15,3,0,2.890131263644035\nCarter Bradley,South Alabama,148.4,13,1,0,1.84999027637961\nJoey Aguilar,Appalachian State,153.9,20,2,0,1.2834643879823642\nPreston Stone,SMU,150.9,19,2,0,3.585768469254517\nHaynes King,Georgia Tech,151.6,21,3,1,3.022707989103738\nGarrett Greene,West Virginia,138.3,8,8,1,3.9218284602799907\nGraham Mertz,Florida,161.8,14,3,1,3.626922810421286\nJordan Travis,Florida State,156.7,18,6,1,20.09628546540568\nJayden Maiava,UNLV,142.0,7,1,0,5.437359480755663\nCameron Ward,Washington State,153.9,16,5,1,2.074815853493715\nChandler Rogers,North Texas,155.5,19,3,0,0.5839349794941899\nGrant Wilson,Old Dominion,141.5,10,1,0,1.518037673309234\nSeth Henigan,Memphis,148.7,16,3,0,6.337771698847422\nSpencer Rattler,South Carolina,147.5,12,2,1,0.44917553926991144\nDarren Grainger,Georgia State,148.6,12,5,0,7.390121047176273\nKeyone Jenkins,Florida International,127.6,6,5,0,0.7060525553186078\nDante Moore,UCLA,129.6,10,0,1,9.64917634662829\nDylan Hopkins,New Mexico,134.2,11,1,0,0.43648167006109995\nFrank Harris,UTSA,146.9,13,1,0,1.955008613582628\nNoah Fifita,Arizona,160.4,11,0,1,4.550298272839033\nMax Johnson,Texas A&M,136.3,8,1,1,3.7988533110703084\nGarrett Shrader,Syracuse,136.7,9,6,1,1.6566619050601665\nZeon Chriss,Louisiana,148.0,10,5,0,2.9978721163663233\nShedeur Sanders,Colorado,154.4,22,3,1,2.2732173890981975\nWill Howard,Kansas State,142.3,14,6,1,9.164135101585275\nThomas Castellanos,Boston College,132.9,11,9,1,4.085881002640107\nChandler Morris,TCU,144.6,12,3,1,2.3363431151241536\nJosh Hoover,TCU,121.6,6,0,1,2.3363431151241536\nDeQuan Finn,Toledo,146.2,14,5,0,6.812910697684246\nBrayden Fowler-Nicolosi,Colorado State,136.0,16,1,0,0.7010094707330415\nJacob Zeno,UAB,148.3,12,4,0,0.32068691240541164\nDevin Leary,Kentucky,136.6,16,1,1,4.05597851232717\nWill Rogers,Mississippi State,138.7,10,0,1,1.5796617547598493\nTaulia Tagovailoa,Maryland,143.4,19,4,1,2.5899631906799176\nNicholas Vattiato,Middle Tennessee State,140.9,15,2,0,0.3013686950815212\nJoe Milton,Tennessee,139.8,13,4,1,9.41162109375\nChevan Cordeiro,San Jose State,134.0,11,3,0,1.4500534065452142\nRocco Becht,Iowa State,133.8,13,2,1,5.35834170003266\nAshton Daniels,Stanford,132.0,9,2,1,0.37198379999545583\nTaylen Green,Boise State,119.4,6,5,0,2.314425600890298\nBrayden Schager,Hawaii,136.1,20,1,0,0.12968356534693654\nDonovan Smith,Houston,138.7,16,4,1,0.7915818564229137\nMikey Keene,Fresno State,146.6,19,0,0,6.6023544879137015\nKurtis Rourke,Ohio,132.7,10,2,0,3.30833021710917\nK.J. Jefferson,Arkansas,139.3,14,1,1,0.31130246477693924\nKyron Drones,Virginia Tech,130.5,7,4,1,1.9365461892721685\nTayven Jackson,Indiana,118.3,2,1,1,0.3271683673469388\nByrum Brown,South Florida,130.1,12,8,0,1.7974004844047549\nLuke Altmyer,Illinois,128.2,10,3,1,1.1782744519511101\nMitch Griffis,Wake Forest,125.6,9,0,1,1.7358648646646366\nJack Turner,Louisiana Tech,121.1,5,2,0,0.3141306578330206\nCam Fancher,Marshall,126.2,7,2,0,2.561406854282923\nEmory Jones,Cincinnati,128.1,13,3,1,0.2743289143912413\nPayton Thorne,Auburn,132.5,8,2,1,2.6221054434793127\nDavis Brin,Georgia Southern,132.6,17,1,0,6.15621558370044\nHeinrich Haarberg,Nebraska,120.6,7,4,1,3.931576393604172\nAustin Reed,Western Kentucky,133.6,20,3,0,2.756866130958241\nRocky Lombardi,Northern Illinois,120.8,6,3,0,1.9158692260502739\nJalen Mayden,San Diego State,121.3,6,3,0,0.8486257639903966\nRiley Leonard,Duke,116.0,3,4,1,6.941343104732745\nCade Klubnik,Clemson,130.8,13,3,1,2.602732654185022\nKedon Slovis,Brigham Young,122.1,12,3,1,2.6767013592331206\nDrew Allar,Penn State,136.1,16,3,1,15.535073698631782\nAndrew Peasley,Wyoming,135.5,13,4,0,5.340610392079221\nMichael Alaimo,Kent State,108.3,2,1,0,0.020380553432620453\nE.J. Warner,Temple,121.3,12,0,0,0.15194072420634921\nAlan Bowman,Oklahoma State,117.9,8,1,1,8.473029241704962\nTa'Quan Roberson,Connecticut,121.9,8,2,0,0.026970704185770404\nBilly Wiles,Southern Mississippi,113.1,8,1,0,0.03366282676031822\nGavin Wimsatt,Rutgers,111.2,7,7,1,6.0703125\nTanner Mordecai,Wisconsin,118.8,3,4,1,5.361768934461805\nConnor Bazelak,Bowling Green State,113.7,5,1,0,2.590704148443759\nHudson Card,Purdue,115.7,8,3,1,0.35572131230810916\nAustin Smith,Eastern Michigan,114.5,7,1,0,0.741358539523677\nJase Bauer,Central Michigan,112.7,5,7,0,1.0458350483246441\nAthan Kaliakmanis,Minnesota,111.2,7,2,1,5.568462563104702\nBrennan Armstrong,North Carolina State,112.5,5,3,1,4.128002797064431\nJiya Wright,Louisiana-Monroe,114.3,7,1,0,0.18188747228381374\nDaniel Richardson,Florida Atlantic,121.2,8,0,0,1.35470254583828\nCole Snyder,Buffalo,115.7,12,1,0,0.6404284053610503\nBrendon Lewis,Nevada,99.4,2,3,0,0.3298927260109024\nAlex Flinn,East Carolina,93.2,4,0,0,0.026840377106438343\n", "type": "text"}, {"name": "heisman_model.pkl", "content": "", "type": "binary"}]