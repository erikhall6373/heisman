[{"name": "app.py", "content": "from shiny import App, ui, render\nimport pandas as pd\nimport numpy as np\nimport pickle\nimport statsmodels.api as sm\nfrom shinywidgets import output_widget, render_widget\nimport plotly.express as px\nfrom pathlib import Path\n\nmodel_path = Path(__file__).parent / \"heisman_model.pkl\"\nmodel_data_path = Path(__file__).parent / \"Model_Data.csv\"\nweekly_data_path = Path(__file__).parent / \"Weekly_Data.csv\"\n\nmodel = pickle.load(open(model_path, 'rb'))\n################### Historical #########################\nmodel_data = pd.read_csv(model_data_path).reset_index(drop = True)\n\npredict_data =  model_data[['Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']]\npredict_data = sm.tools.add_constant(predict_data)\npredict_data['Prediction'] = model.predict(predict_data)\npredict_data = predict_data['Prediction']\n\nmodel_data = pd.merge(model_data, predict_data, left_index=True, right_index=True)\nmodel_data['CPI'] = model_data['CPI'].round(2)\nmodel_data['Prediction'] = model_data['Prediction'].round(2)\n\n################### Current #########################\ncurrent_df = pd.read_csv(weekly_data_path).reset_index(drop = True)\n\ncurrent_predict_df =  current_df[['Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']]\ncurrent_predict_df = sm.tools.add_constant(current_predict_df)\ncurrent_predict_df['Projected Voting Points'] = model.predict(current_predict_df)\ncurrent_predict_df = current_predict_df['Projected Voting Points']\n\ncurrent_df = pd.merge(current_df, current_predict_df, left_index=True, right_index=True)\ncurrent_df['CPI'] = current_df['CPI'].round(2)\ncurrent_df['Projected Voting Points'] = current_df['Projected Voting Points'].round(2)\n\n\n# Part 1: ui ----\napp_ui = ui.page_fluid(\n    ui.navset_tab(\n        ui.nav(\"Model Details\", \n           \n        ui.markdown(\n            \"\"\"\n            # So how does this model work anyway?\n            This is a project initially created in the loads of free time that existed in the summer of 2020. And now\n            has taken on a collaborative work effort in the creation of the product.\n            <br />\n\n            Simply put, the model aims to predict the final standings for the most prestigous indivdual award in \n            collegiate football, specifically for quarterbacks. For legal purposes, this project does not explicitly call\n            out the name of the award. As a hint, the award is named after the man that coached Georgia Tech to a 222-0 victory\n            against Cumberland in 1916. It is worth note that the model focuses on quarterbacks only,\n            as it is difficult to come up with a sample of metrics that apply to the different positions across college football.\n            <br />\n\n            The model itself is a linear regression with award voting points as a response, and individual and team\n            statitistics as the predictors. The model is built with training data from the 2006 to 2018 seasons.\n            <br />\n\n            The model is made up of the following 5 predictors;\n            <br />\n            \n            **Passer Rating** : Passer efficency rating as according to pro-football-reference.com.\n            <br />\n\n            **Passing TDs** : Number of passing touchdowns thrown by a quarterback.\n            <br />\n\n            **Rushing TDs** : Number of rushing touchdowns ran by a quarterback.\n            <br />\n\n            **Power 5 Indicator** : A binary value of 0 or 1. Set equal to 1, \n            if the quarterback's team plays in a power 5 conference. Otherwise 0. Notre Dame is the only independent team \n            to receive a power 5 label.\n            <br />\n\n            **CPI** : A team strength of record metric involving the winning percentages of opponents. More details \n            of the metric can be found at www.cpiratings.com/about.html.\n            \"\"\"\n        )\n               ),\n        ui.nav(\"Past Model Results\", \n           \n        ui.input_select(\"model_year\", \"Model Year\", model_data['Year'].tolist()),\n        ui.output_table(\"historical_data\")\n               ),\n\n    ui.nav(\"Current Model Results\", \n           \n        ui.output_table(\"current_data\")\n               ),\n    \n    ui.nav(\"What If\", \n           \n        ui.input_numeric(\"what_if_QBR\", \"Passer Rating\", value=0.0),\n        ui.input_numeric(\"what_if_pass_TD\", \"Passing TDs\", value=0),\n        ui.input_numeric(\"what_if_rush_TD\", \"Rushing TDs\", value=0),\n        ui.input_radio_buttons(\"what_if_power_5\", \"Power 5 Conference\",  {1 : \"Yes\", 0: \"No\"}),\n        ui.input_numeric(\"what_if_CPI\", \"CPI\", value=0.0),\n        ui.output_text(\"what_if_analysis\")\n               ),\n    \n    ui.nav(\"Scatter\",\n           ui.div(\n           output_widget(\"my_widget\")\n           )\n           )\n    )\n)\n\n\n\n\n# Part 2: server ----\ndef server(input, output, session):\n\n    @output\n    @render.table\n    def historical_data():\n\n        result_df = model_data[model_data['Year'] == int(input.model_year())]\n\n        result_df['Actual_Rank'] = result_df['points_won'].rank(ascending = False).astype('int')\n        result_df['Predicted_Rank'] = result_df['Prediction'].rank(ascending = False).astype('int')\n\n        result_cols = ['Player', 'School', 'Actual_Rank', 'Predicted_Rank', 'Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']\n        result_df = result_df[result_cols]\n\n        return result_df\n    \n    @output\n    @render.table\n    def current_data():\n\n        result_df = current_df\n\n        result_df = result_df.sort_values(by = 'Projected Voting Points', ascending = False)\n        result_df = result_df.reset_index(drop = True)\n        result_df['Rank'] = result_df.index + 1\n        result_cols = ['Rank', 'Player', 'School', 'Projected Voting Points', 'Passing_Rate', 'Passing_TD', 'Rushing_TD', 'Power5', 'CPI']\n        result_df = result_df[result_cols]\n\n        return result_df\n    \n    @output\n    @render.text\n    def what_if_analysis():\n\n        what_if_df = pd.DataFrame({\n            'Passing_Rate' : [float(input.what_if_QBR())],\n            'Passing_TD' : [int(input.what_if_pass_TD())],\n            'Rushing_TD' : [int(input.what_if_rush_TD())],\n            'Power5' : [int(input.what_if_power_5())],\n            'CPI' : [float(input.what_if_CPI())]\n        })\n\n        what_if_df = sm.tools.add_constant(what_if_df, has_constant='add')\n\n        what_if_df['Prediction'] = model.predict(what_if_df)\n\n        result = what_if_df.iloc[0]['Prediction']\n        result = result.round(2)\n\n        return f\"A player with these statistics would have {result} projected voting points.\"\n    \n    @output\n    @render_widget\n    def my_widget():\n        fig = px.scatter(\n            model_data, x=\"Year\", y=\"Prediction\",\n            hover_data=['Player']\n        )\n        return fig\n\n# Combine into a shiny app.\n# Note that the variable must be \"app\".\napp = App(app_ui, server)", "type": "text"}, {"name": "Model_Data.csv", "content": "Player,School,Year,points_won,Passing_Rate,Passing_TD,Rushing_TD,Power5,CPI\nTroy Smith,Ohio State,2006,2540,161.9,30,1,1,15.013680174870936\nBrady Quinn,Notre Dame,2006,782,146.7,37,2,1,8.231919146738909\nColt Brennan,Hawaii,2006,202,186.0,58,5,0,6.365435540069685\nTim Tebow,Florida,2007,1957,172.5,32,23,1,7.987912822160973\nColt Brennan,Hawaii,2007,632,159.8,38,8,0,7.5994759572849\nChase Daniel,Missouri,2007,425,147.9,33,4,1,11.748104548755686\nDennis Dixon,Oregon,2007,178,161.2,20,9,1,6.540100800550993\nPat White,West Virginia,2007,150,151.4,14,14,0,11.379512110196254\nMatt Ryan,Boston College,2007,63,127.0,31,2,1,8.768469146897912\nSam Bradford,Oklahoma,2008,1726,180.8,50,5,1,15.05704821146074\nColt McCoy,Texas,2008,1604,173.8,34,11,1,18.946208112380297\nTim Tebow,Florida,2008,1575,172.4,30,12,1,19.409963559776127\nGraham Harrell,Texas Tech,2008,213,160.0,45,6,1,13.05053009399466\nPat White,West Virginia,2008,19,142.3,21,8,0,6.385230641176652\nNate Davis,Ball State,2008,10,157.0,26,5,0,6.050702467936028\nColt McCoy,Texas,2009,1145,147.4,27,3,1,16.18331903502398\nTim Tebow,Florida,2009,390,164.2,21,14,1,18.51486090299109\nKellen Moore,Boise State,2009,100,161.7,39,1,0,14.46082921027991\nCase Keenum,Houston,2009,37,154.8,44,4,0,4.218052997436561\nCam Newton,Auburn,2010,2263,182.0,30,20,1,23.86780983482786\nAndrew Luck,Stanford,2010,1079,170.2,32,3,1,13.946308906421848\nKellen Moore,Boise State,2010,635,182.6,35,1,0,12.802241937566109\nDenard Robinson,Michigan,2010,84,149.6,18,14,1,3.2478886059804224\nRyan Mallett,Arkansas,2010,41,163.6,32,4,1,10.82973394387262\nColin Kaepernick,Nevada,2010,31,150.5,21,20,0,11.384387560083765\nAndy Dalton,TCU,2010,30,166.5,27,6,0,14.944350584507326\nRobert Griffin III,Baylor,2011,1687,189.5,37,10,1,10.316157413813375\nAndrew Luck,Stanford,2011,1407,169.7,37,2,1,9.667409405228565\nMatt Barkley,USC,2011,153,161.2,39,2,1,9.562203977574791\nCase Keenum,Houston,2011,123,174.0,48,3,0,11.420863535280626\nKellen Moore,Boise State,2011,90,175.2,43,0,0,12.265954369362133\nRussell Wilson,Wisconsin,2011,52,191.8,33,6,1,8.281890427937858\nJohnny Manziel,Texas A&M,2012,2029,155.3,26,21,1,15.754760156860875\nCollin Klein,Kansas State,2012,894,149.2,16,23,1,11.817693133497077\nBraxton Miller,Ohio State,2012,144,140.5,15,13,1,15.169148199200322\nJordan Lynch,Northern Illinois,2012,52,144.9,25,19,0,6.92703223246081\nJameis Winston,Florida State,2013,2205,184.8,40,4,1,19.32052650022246\nA.J. McCarron,Alabama,2013,704,167.2,28,0,1,11.90196866646686\nJordan Lynch,Northern Illinois,2013,558,138.4,24,23,0,7.111211920283987\nJohnny Manziel,Texas A&M,2013,421,172.9,37,9,1,8.051361094960829\nBryce Petty,Baylor,2013,127,174.3,32,14,1,11.402244928532845\nDerek Carr,Fresno State,2013,107,156.3,50,2,0,7.156147448813237\nBraxton Miller,Ohio State,2013,91,158.1,24,12,1,10.39338163747249\nMarcus Mariota,Oregon,2014,2534,181.7,42,15,1,16.12744333111277\nTrevone Boykin,TCU,2014,218,145.9,33,8,1,13.076626318134918\nJ.T. Barrett,Ohio State,2014,78,169.8,34,11,1,20.0747422358138\nJameis Winston,Florida State,2014,51,145.5,25,3,1,18.46103191334333\nDak Prescott,Mississippi State,2014,21,151.7,27,14,1,9.456126458240307\nDeshaun Watson,Clemson,2015,1165,156.3,35,12,1,19.16167854243615\nBaker Mayfield,Oklahoma,2015,334,173.3,36,7,1,12.740224517380366\nKeenan Reynolds,Navy,2015,180,162.1,8,24,0,10.128862442591032\nConnor Cook,Michigan State,2015,13,136.6,24,0,1,14.713371407886711\nLamar Jackson,Louisville,2016,2144,148.8,30,21,1,5.608782090662399\nDeshaun Watson,Clemson,2016,1524,151.1,41,9,1,23.78005620893973\nBaker Mayfield,Oklahoma,2016,361,196.4,40,6,1,11.25001891558911\nJake Browning,Washington,2016,182,167.5,43,4,1,12.923870541835983\nBaker Mayfield,Oklahoma,2017,2398,198.9,43,5,1,11.183099131224177\nLamar Jackson,Louisville,2017,793,146.6,27,18,1,3.9226957076095994\nMason Rudolph,Oklahoma State,2017,56,170.6,37,10,1,6.425405376500221\nMcKenzie Milton,UCF,2017,54,179.3,37,8,0,19.08379077956817\nKyler Murray,Oklahoma,2018,2167,199.2,42,12,1,12.942861869472573\nTua Tagovailoa,Alabama,2018,1871,199.4,43,5,1,20.688097541235337\nDwayne Haskins,Ohio State,2018,783,174.1,50,4,1,13.097950650643533\nWill Grier,West Virginia,2018,126,175.5,37,3,1,5.5749718367802\nGardner Minshew,Washington State,2018,122,147.6,38,4,1,10.593990104817577\nMcKenzie Milton,UCF,2018,39,161.0,25,9,0,11.842688493982308\nJoe Burrow,LSU,2019,2608,202.0,60,5,1,27.81090580974389\nJalen Hurts,Oklahoma,2019,762,191.2,32,20,1,11.86131918185052\nJustin Fields,Ohio State,2019,747,181.4,41,10,1,19.03510596761913\nTrevor Lawrence,Clemson,2019,88,166.7,36,9,1,17.71916867557893\n", "type": "text"}, {"name": "Weekly_Data.csv", "content": "Player,School,Passing_Rate,Passing_TD,Rushing_TD,Power5,CPI\nJayden Daniels,LSU,197.7,22,4,1,9.996470516382256\nMichael Penix Jr.,Washington,189.9,20,0,1,22.69695237105186\nJ.J. McCarthy,Michigan,195.9,14,3,1,21.270050538343227\nJalen Milroe,Alabama,174.7,11,5,1,13.570723302000426\nTimmy Mcclain,UCF,177.7,9,1,1,1.6849078341013826\nKaidon Salter,Liberty,175.6,14,6,0,12.20981023988543\nCaleb Williams,USC,187.0,23,6,1,8.420336946119777\nJaxson Dart,Ole Miss,167.8,12,4,1,17.703387784662432\nDiego Pavia,New Mexico State,167.0,14,2,0,0.7450503077325233\nKyle McCord,Ohio State,165.9,11,0,1,26.14413878407365\nDillon Gabriel,Oklahoma,178.2,16,5,1,27.715560317738326\nBrady Cook,Missouri,169.0,14,4,1,16.729790617545717\nTyler Van Dyke,Miami (FL),171.8,16,1,1,5.311439268232076\nCardell Williams,Tulsa,151.6,8,3,0,2.171415441176471\nQuinn Ewers,Texas,163.8,11,5,1,20.75175441116404\nBrett Gabbert,Miami (OH),162.9,14,2,0,3.920146548570542\nJordan McCloud,James Madison,168.1,14,2,0,19.975142045454543\nCarson Beck,Georgia,163.8,12,3,1,15.485074626865671\nJack Plummer,Louisville,153.2,13,1,1,12.010369640535282\nSam Hartman,Notre Dame,166.9,18,2,1,15.199267174586778\nDrake Maye,North Carolina,159.1,12,4,1,21.284646674865197\nJT Daniels,Rice,157.4,15,0,0,1.0250516408591794\nSpencer Rattler,South Carolina,163.3,11,2,1,1.2742037978468896\nD.J. Uiagalelei,Oregon State,158.9,15,5,1,14.987510612382634\nKeyone Jenkins,Florida International,133.5,5,4,0,0.618658613936305\nGarrett Greene,West Virginia,143.7,6,5,1,5.763090676883778\nZeon Chriss,Louisiana,159.7,7,5,0,2.5762195121951215\nTJ Finley,Texas State,160.5,14,3,0,3.075065664479112\nBo Nix,Oregon,178.2,17,1,1,10.974942044357128\nCooper Legas,Utah State,159.7,13,0,0,1.8086380318333217\nDarren Grainger,Georgia State,154.4,8,5,0,9.702508336771178\nGraham Mertz,Florida,163.7,12,2,1,5.004320683556366\nGunnar Watson,Troy,144.8,11,0,0,9.012728683930499\nGrayson McCall,Coastal Carolina,143.9,8,1,0,2.9700185403318238\nHaynes King,Georgia Tech,155.4,16,2,1,2.6717275943396226\nGrant Wilson,Old Dominion,134.8,7,1,0,1.1267314721369597\nCameron Ward,Washington State,159.5,14,3,1,6.126747240028489\nChandler Rogers,North Texas,155.8,12,3,0,0.9459459459459462\nCarter Bradley,South Alabama,149.2,11,1,0,2.035137287621359\nJordan Travis,Florida State,154.1,13,4,1,23.00141752921983\nJayden Maiava,UNLV,140.3,5,1,0,6.340255400405775\nShedeur Sanders,Colorado,160.3,21,3,1,3.3095043052368793\nDante Moore,UCLA,129.8,10,0,1,9.983896940418676\nDeQuan Finn,Toledo,149.3,12,4,0,3.4537886646609453\nSeth Henigan,Memphis,144.7,13,3,0,5.452094625112917\nJoey Aguilar,Appalachian State,144.5,14,1,0,1.9296139171269242\nBrayden Fowler-Nicolosi,Colorado State,137.7,14,1,0,1.4417531718569778\nTaulia Tagovailoa,Maryland,146.0,16,4,1,4.004389579822285\nK.J. Jefferson,Arkansas,148.9,14,1,1,0.541213949654249\nGarrett Shrader,Syracuse,135.5,8,6,1,3.591105011169142\nDylan Hopkins,New Mexico,130.4,7,1,0,0.298408819083788\nAshton Daniels,Stanford,139.6,7,0,1,0.7859639513429152\nChandler Morris,TCU,144.6,12,3,1,3.7084461597614493\nNoah Fifita,Arizona,156.7,8,0,1,3.4744936096058257\nMax Johnson,Texas A&M,133.5,7,1,1,3.307061073261007\nJacob Zeno,UAB,148.3,12,4,0,0.40883006949742523\nWill Rogers,Mississippi State,138.7,10,0,1,1.602176870748299\nThomas Castellanos,Boston College,135.5,10,7,1,2.5212681708644276\nPreston Stone,SMU,137.6,14,1,0,3.484857682635864\nMikey Keene,Fresno State,147.7,15,0,0,4.465065626028063\nByrum Brown,South Florida,133.9,12,7,0,1.4834943682158241\nChevan Cordeiro,San Jose State,130.4,8,3,0,0.43959378759469797\nDonovan Smith,Houston,144.5,13,4,1,1.3569846082089552\nPhil Jurkovec,Pitt,124.6,6,1,1,0.5460516122693451\nBrayden Schager,Hawaii,137.8,17,1,0,0.3126073895065902\nLuke Altmyer,Illinois,127.7,8,3,1,1.8241426642919532\nCam Fancher,Marshall,135.0,7,2,0,4.750060178127255\nWill Howard,Kansas State,130.6,9,6,1,7.379528677010535\nMitch Griffis,Wake Forest,129.8,9,0,1,1.4392148740192017\nRiley Leonard,Duke,129.8,3,4,1,16.525516391324228\nNicholas Vattiato,Middle Tennessee State,137.4,11,2,0,0.4310847491706042\nRocco Becht,Iowa State,134.4,12,2,1,5.310806554517334\nDevin Leary,Kentucky,130.2,14,1,1,5.820780693229675\nEmory Jones,Cincinnati,131.2,11,3,1,0.8282001201923075\nTayven Jackson,Indiana,118.3,2,1,1,0.6737526165150155\nKedon Slovis,Brigham Young,128.1,10,3,1,2.71911029486787\nRocky Lombardi,Northern Illinois,123.4,6,2,0,1.1935816216927155\nKyron Drones,Virginia Tech,128.3,6,4,1,1.3726528468543207\nTaylen Green,Boise State,116.1,5,4,0,1.4237558654926838\nJack Turner,Louisiana Tech,121.1,5,2,0,0.3865979381443298\nJalen Mayden,San Diego State,125.1,6,3,0,1.5487259992754496\nJoe Milton,Tennessee,133.6,10,4,1,10.950425091911764\nDrew Allar,Penn State,145.3,12,3,1,24.810970139689864\nKurtis Rourke,Ohio,131.7,8,2,0,3.418116014878859\nTa'Quan Roberson,Connecticut,131.6,7,1,0,0.07637773686890442\nAustin Reed,Western Kentucky,134.2,14,3,0,4.995477883931683\nNoah Kim,Michigan State,119.0,6,0,1,0.9758874520779282\nAndrew Peasley,Wyoming,141.6,12,4,0,9.107826346139213\nMichael Alaimo,Kent State,111.2,2,1,0,0.035410592808551994\nHudson Card,Purdue,121.1,7,3,1,0.5990409401488118\nHeinrich Haarberg,Nebraska,116.9,4,3,1,2.2462277091906726\nDavis Brin,Georgia Southern,130.3,12,1,0,3.1488850344069195\nCade Klubnik,Clemson,135.4,11,3,1,8.347862188230616\nGavin Wimsatt,Rutgers,114.2,7,4,1,6.405312421763326\nE.J. Warner,Temple,121.3,12,0,0,0.21086421327107283\nJase Bauer,Central Michigan,112.2,4,7,0,2.099125364431487\nPayton Thorne,Auburn,118.6,4,2,1,2.153921072839992\nBilly Wiles,Southern Mississippi,112.7,7,1,0,0.08553542818445446\nTanner Mordecai,Wisconsin,118.8,3,4,1,6.393294608234562\nAlan Bowman,Oklahoma State,112.6,4,1,1,6.270821085635898\nBrennan Armstrong,North Carolina State,112.5,5,3,1,4.095803331129478\nDaniel Richardson,Florida Atlantic,121.7,5,0,0,2.0897284533648164\nJiya Wright,Louisiana-Monroe,114.1,6,1,0,0.45108611448337194\nAthan Kaliakmanis,Minnesota,110.8,6,2,1,3.5997308612440193\nAustin Smith,Eastern Michigan,114.5,6,1,0,1.1695764438716405\nBen Bryant,Northwestern,115.9,6,2,1,2.9203424043062203\nBrendon Lewis,Nevada,102.4,2,3,0,0.0\nCole Snyder,Buffalo,116.7,11,1,0,0.3553316852262804\nAlex Flinn,East Carolina,85.5,1,0,0,0.07646706398007125\n", "type": "text"}, {"name": "heisman_model.pkl", "content": "", "type": "binary"}]